import os
from typing import Dict, List
import uuid
import dotenv
from aiogram import Bot, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InputMediaPhoto, Message, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


dotenv.load_dotenv()
# –ó–∞–≥—Ä—É–∂–∞–µ–º ID —á–∞—Ç–æ–≤ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '0'))
NOTIFICATION_CHAT = int(os.getenv('NOTIFICATION_CHAT', str(ADMIN_CHAT_ID)))

# –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—à–∏ –ø–ª–æ—â–∞–¥–∫–∏
LINKS = {
    'main': 'https://t.me/FreelanceSET',
    'premium': 'https://t.me/VakansiiPREMIUM',
    'free': 'https://t.me/freelanceFREEchat',
    'reviews': 'https://t.me/PUSHfeedback',
}

ADMIN_CONTACT_URL = 'https://t.me/push_admin_Evgen'

# –£—Ç–∏–ª–∏—Ç–∞: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º¬ª –≤ —Å–∞–º—ã–π –Ω–∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def add_contact_button(builder: InlineKeyboardBuilder) -> InlineKeyboardBuilder:
    builder.row(InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', url=ADMIN_CONTACT_URL))
    return builder

# Global storage for pending orders
pending_orders: Dict[str, Dict] = {}

# Define FSM states for the purchase process
class Purchase(StatesGroup):
    waiting_check = State()  # Waiting for payment check photo
    waiting_post = State()   # Waiting for the post text

# –ù–æ–≤—ã–π FSM –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
class AdminReject(StatesGroup):
    waiting_reason = State()

# Define CallbackData factory for menu navigation
class MenuCallback(CallbackData, prefix="menu"):
    level: str  # e.g., 'main', 'sub', 'extra', 'subextra', 'toggle', 'buy', 'cancel'
    user_type: str = ""  # 'employer' or 'freelancer'
    option: str = ""     # '1', '2', etc.
    suboption: str = ""  # For extra options like 'pin', 'boost'
    variant: str = ""    # For variants like '1_month', 'forever'
    action: str = ""     # 'add' or 'remove' for toggle

# Define CallbackData for admin actions
class AdminCallback(CallbackData, prefix="admin"):
    action: str  # 'confirm' or 'reject'
    order_id: str

menu_router = Router()

# Suboption names
SUBOPTION_NAMES = {
    "pin": "–ó–∞–∫—Ä–µ–ø",
    "boost": "–ü–æ–¥–Ω—è—Ç–∏–µ",
}

# Emoji for main options
OPTION_EMOJIS = {
    "1": "üìå",
    "2": "üìë",
    "3": "üì¢",
    "4": "üì¶",
    "5": "üì¶",
    "6": "‚≠ê"
}

# Base prices (–Ω–æ–≤—ã–π –ø—Ä–∞–π—Å)
BASE_PRICES = {
    "employer": {
        "1": 0,          # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø (–±–µ–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)
        "2": 1600,       # –ü–ª–∞—Ç–Ω—ã–π —á–∞—Ç
        "3": 2400,       # –ö–∞–Ω–∞–ª (–ø—Ä–µ–º–∏—É–º)
        "4": 2700,       # –ü–∞–∫–µ—Ç –°—Ç–∞–Ω–¥–∞—Ä—Ç
        "5": 3200,       # –ü–∞–∫–µ—Ç –°—Ç–∞–Ω–¥–∞—Ä—Ç + –ó–∞–∫—Ä–µ–ø
        "6": 10000       # –ü–∞–∫–µ—Ç –ü—Ä–µ–º–∏—É–º (–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ —Ä–∞–Ω–µ–µ)
    },
    "freelancer": {
        "1": 0,          # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø (–±–µ–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)
        "2": 1200,       # –ü–ª–∞—Ç–Ω—ã–π —á–∞—Ç
        "3": 1500,       # –ö–∞–Ω–∞–ª (–ø—Ä–µ–º–∏—É–º)
        "4": 1950,       # –ü–∞–∫–µ—Ç –°—Ç–∞–Ω–¥–∞—Ä—Ç
        "5": 2450,       # –ü–∞–∫–µ—Ç –°—Ç–∞–Ω–¥–∞—Ä—Ç + –ó–∞–∫—Ä–µ–ø
        "6": 5000        # –ü–∞–∫–µ—Ç –ü—Ä–µ–º–∏—É–º (–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ —Ä–∞–Ω–µ–µ)
    }
}

# Descriptions —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –∏ —Å—Å—ã–ª–∫–∞–º–∏
DESCRIPTIONS = {
    "employer": {
        "1": (
            "üìå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø\n"
            "‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è, –ø–æ–∫—É–ø–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —á–∞—Ç–µ.\n"
            "‚Ä¢ –ó–∞–∫—Ä–µ–ø —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—à –ø–æ—Å—Ç –≤–≤–µ—Ä—Ö—É —á–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {LINKS['free']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        ),
        "2": (
            "üìë –°—Ç–∞–Ω–¥–∞—Ä—Ç (–ü–ª–∞—Ç–Ω—ã–π —á–∞—Ç) ‚Äî 1600‚ÇΩ\n"
            "‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
            "‚Ä¢ –ë–µ–∑ –∑–∞–∫—Ä–µ–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: –ó–∞–∫—Ä–µ–ø.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {LINKS['main']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        ),
        "3": (
            "üì¢ –ö–∞–Ω–∞–ª (–ü—Ä–µ–º–∏—É–º) ‚Äî 2400‚ÇΩ\n"
            "‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
            "‚Ä¢ –ë–µ–∑ –∑–∞–∫—Ä–µ–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: –ó–∞–∫—Ä–µ–ø.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª: {LINKS['premium']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        ),
        "4": (
            "üì¶ –ü–∞–∫–µ—Ç –°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 2700‚ÇΩ (–≤–º–µ—Å—Ç–æ 4750‚ÇΩ)\n"
            "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç (–±–µ–∑ –∑–∞–∫—Ä–µ–ø–∞).\n"
            "‚Ä¢ –ü—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª (–±–µ–∑ –∑–∞–∫—Ä–µ–ø–∞).\n"
            "‚Ä¢ –ó–∞–∫—Ä–µ–ø –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —á–∞—Ç–µ –Ω–∞ 1 –º–µ—Å—è—Ü.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∏: \n–æ—Å–Ω–æ–≤–Ω–æ–π {LINKS['main']}\n–ø—Ä–µ–º–∏—É–º {LINKS['premium']}\n–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π {LINKS['free']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        ),
        "5": (
            "üì¶ –ü–∞–∫–µ—Ç –°—Ç–∞–Ω–¥–∞—Ä—Ç + –ó–∞–∫—Ä–µ–ø ‚Äî 3200‚ÇΩ (–≤–º–µ—Å—Ç–æ 6000‚ÇΩ)\n"
            "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç ‚Äî —Å –∑–∞–∫—Ä–µ–ø–æ–º –Ω–∞ 1 –º–µ—Å—è—Ü.\n"
            "‚Ä¢ –ü—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª ‚Äî —Å –∑–∞–∫—Ä–µ–ø–æ–º –Ω–∞ 1 –º–µ—Å—è—Ü.\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç ‚Äî –∑–∞–∫—Ä–µ–ø –Ω–∞ 1 –º–µ—Å—è—Ü.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∏: \n–æ—Å–Ω–æ–≤–Ω–æ–π {LINKS['main']}\n–ø—Ä–µ–º–∏—É–º {LINKS['premium']}\n–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π {LINKS['free']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        ),
        "6": (
            "‚≠ê –ü–∞–∫–µ—Ç –ü—Ä–µ–º–∏—É–º\n"
            "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç ‚Äî –∑–∞–∫—Ä–µ–ø –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
            "‚Ä¢ –ü—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª ‚Äî –∑–∞–∫—Ä–µ–ø –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç ‚Äî –∑–∞–∫—Ä–µ–ø –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∏: \n–æ—Å–Ω–æ–≤–Ω–æ–π {LINKS['main']}\n–ø—Ä–µ–º–∏—É–º {LINKS['premium']}\n–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π {LINKS['free']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        )
    },
    "freelancer": {
        "1": (
            "üìå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø\n"
            "‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è, –ø–æ–∫—É–ø–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —á–∞—Ç–µ.\n"
            "‚Ä¢ –ó–∞–∫—Ä–µ–ø —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—à –ø–æ—Å—Ç –≤–≤–µ—Ä—Ö—É —á–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {LINKS['free']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        ),
        "2": (
            "üìÑ –°—Ç–∞–Ω–¥–∞—Ä—Ç (–ü–ª–∞—Ç–Ω—ã–π —á–∞—Ç) ‚Äî 1200‚ÇΩ\n"
            "‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
            "‚Ä¢ –ë–µ–∑ –∑–∞–∫—Ä–µ–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: –ó–∞–∫—Ä–µ–ø.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {LINKS['main']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        ),
        "3": (
            "üì¢ –ö–∞–Ω–∞–ª (–ü—Ä–µ–º–∏—É–º) ‚Äî 1500‚ÇΩ\n"
            "‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
            "‚Ä¢ –ë–µ–∑ –∑–∞–∫—Ä–µ–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: –ó–∞–∫—Ä–µ–ø.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª: {LINKS['premium']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        ),
        "4": (
            "üì¶ –ü–∞–∫–µ—Ç –°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 1950‚ÇΩ (–≤–º–µ—Å—Ç–æ 3450‚ÇΩ)\n"
            "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç (–±–µ–∑ –∑–∞–∫—Ä–µ–ø–∞).\n"
            "‚Ä¢ –ü—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª (–±–µ–∑ –∑–∞–∫—Ä–µ–ø–∞).\n"
            "‚Ä¢ –ó–∞–∫—Ä–µ–ø –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —á–∞—Ç–µ –Ω–∞ 1 –º–µ—Å—è—Ü.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∏: \n–æ—Å–Ω–æ–≤–Ω–æ–π {LINKS['main']}\n–ø—Ä–µ–º–∏—É–º {LINKS['premium']}\n–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π {LINKS['free']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        ),
        "5": (
            "üì¶ –ü–∞–∫–µ—Ç –°—Ç–∞–Ω–¥–∞—Ä—Ç + –ó–∞–∫—Ä–µ–ø ‚Äî 2450‚ÇΩ (–≤–º–µ—Å—Ç–æ 4550‚ÇΩ)\n"
            "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç ‚Äî —Å –∑–∞–∫—Ä–µ–ø–æ–º –Ω–∞ 1 –º–µ—Å—è—Ü.\n"
            "‚Ä¢ –ü—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª ‚Äî —Å –∑–∞–∫—Ä–µ–ø–æ–º –Ω–∞ 1 –º–µ—Å—è—Ü.\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç ‚Äî –∑–∞–∫—Ä–µ–ø –Ω–∞ 1 –º–µ—Å—è—Ü.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∏: \n–æ—Å–Ω–æ–≤–Ω–æ–π {LINKS['main']}\n–ø—Ä–µ–º–∏—É–º {LINKS['premium']}\n–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π {LINKS['free']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        ),
        "6": (
            "‚≠ê –ü–∞–∫–µ—Ç –ü—Ä–µ–º–∏—É–º\n"
            "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç ‚Äî –∑–∞–∫—Ä–µ–ø –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
            "‚Ä¢ –ü—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª ‚Äî –∑–∞–∫—Ä–µ–ø –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç ‚Äî –∑–∞–∫—Ä–µ–ø –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
            f"‚Ä¢ –°—Å—ã–ª–∫–∏: \n–æ—Å–Ω–æ–≤–Ω–æ–π {LINKS['main']}\n–ø—Ä–µ–º–∏—É–º {LINKS['premium']}\n–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π {LINKS['free']}\n"
            f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}"
        )
    }
}

# Suboptions available
SUBOPTIONS_AVAILABLE = {
    "employer": {
        "1": ["pin"],
        "2": ["pin", "boost"],
        "3": ["pin"],
        "4": [],
        "5": [],
        "6": []
    },
    "freelancer": {
        "1": ["pin"],
        "2": ["pin", "boost"],
        "3": ["pin"],
        "4": [],
        "5": [],
        "6": []
    }
}

# Prices dict for variants (–Ω–æ–≤—ã–π –ø—Ä–∞–π—Å)
PRICES_DICT = {
    "pin_free_chat": {
        "1_week": {"text": "1 –Ω–µ–¥–µ–ª—è", "price": 450},
        "2_weeks": {"text": "2 –Ω–µ–¥–µ–ª–∏", "price": 500},
        "3_weeks": {"text": "3 –Ω–µ–¥–µ–ª–∏", "price": 650},
        "1_month": {"text": "1 –º–µ—Å—è—Ü", "price": 750},
        "2_months": {"text": "2 –º–µ—Å—è—Ü–∞", "price": 850},
        "3_months": {"text": "3 –º–µ—Å—è—Ü–∞", "price": 1000},
        "6_months": {"text": "6 –º–µ—Å—è—Ü–µ–≤", "price": 1750},
        "forever": {"text": "–ù–ê–í–°–ï–ì–î–ê", "price": 2200},
    },
    "pin_employer_chat": {
        "2_weeks": {"text": "2 –Ω–µ–¥–µ–ª–∏", "price": 400},
        "1_month": {"text": "1 –º–µ—Å—è—Ü", "price": 550},
        "3_months": {"text": "3 –º–µ—Å—è—Ü–∞", "price": 1000},
        "forever": {"text": "–ù–ê–í–°–ï–ì–î–ê", "price": 5000},
    },
    "pin_freelancer_chat": {
        "1_month": {"text": "1 –º–µ—Å—è—Ü", "price": 550},
        "3_months": {"text": "3 –º–µ—Å—è—Ü–∞", "price": 1000},
        "forever": {"text": "–ù–ê–í–°–ï–ì–î–ê", "price": 5000},
    },
    "pin_channel_employer": {
        "2_weeks": {"text": "2 –Ω–µ–¥–µ–ª–∏", "price": 550},
        "1_month": {"text": "1 –º–µ—Å—è—Ü", "price": 700},
        "3_months": {"text": "3 –º–µ—Å—è—Ü–∞", "price": 1500},
        "forever": {"text": "–ù–ê–í–°–ï–ì–î–ê", "price": 10000},
    },
    "pin_channel_freelancer": {
        "2_weeks": {"text": "2 –Ω–µ–¥–µ–ª–∏", "price": 350},
        "1_month": {"text": "1 –º–µ—Å—è—Ü", "price": 550},
        "3_months": {"text": "3 –º–µ—Å—è—Ü–∞", "price": 750},
        "forever": {"text": "–ù–ê–í–°–ï–ì–î–ê", "price": 5000},
    },
    "boost": {
        "1": {"text": "1 –ø–æ–¥–Ω—è—Ç–∏–µ", "price": 450},
        "2": {"text": "2 –ø–æ–¥–Ω—è—Ç–∏—è", "price": 650},
        "3": {"text": "3 –ø–æ–¥–Ω—è—Ç–∏—è", "price": 700},
        "4": {"text": "4 –ø–æ–¥–Ω—è—Ç–∏—è", "price": 850},
        "5": {"text": "5 –ø–æ–¥–Ω—è—Ç–∏–π", "price": 900},
    },
}

SUBOPTION_EMOJIS = {
    "pin": "üìå",
    "boost": "‚¨ÜÔ∏è",
}

def get_suboption_key(suboption: str, user_type: str, option: str) -> str:
    if suboption == "pin":
        if option == "1":
            return "pin_free_chat"
        elif option == "2":
            return "pin_employer_chat" if user_type == "employer" else "pin_freelancer_chat"
        elif option == "3":
            return "pin_channel_employer" if user_type == "employer" else "pin_channel_freelancer"
    elif suboption == "boost":
        return "boost"
    return ""

# Function to build extra text and keyboard (category buttons)
async def build_extra_text_and_keyboard(state: FSMContext, user_type: str, option: str) -> tuple[str, InlineKeyboardMarkup]:
    data = await state.get_data()
    selected = data.get("selected_suboptions", {})
    available = SUBOPTIONS_AVAILABLE.get(user_type, {}).get(option, [])
    base_price = BASE_PRICES[user_type][option]
    desc = DESCRIPTIONS[user_type][option]
    text = desc
    builder = InlineKeyboardBuilder()
    sub_total = 0
    selected_text = ""

    if available:
        text += "\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:"
        for subopt in available:
            sel_var = selected.get(subopt)
            if sel_var:
                key = get_suboption_key(subopt, user_type, option)
                var_info = PRICES_DICT[key][sel_var]
                price = var_info["price"]
                sub_total += price
                selected_text += f"\n- {SUBOPTION_EMOJIS[subopt]} {SUBOPTION_NAMES[subopt]} {var_info['text']} ({price}‚ÇΩ)"
            btext = f"{SUBOPTION_EMOJIS[subopt]} {SUBOPTION_NAMES[subopt]}"
            if sel_var:
                btext += f" (–≤—ã–±—Ä–∞–Ω–æ: {PRICES_DICT[get_suboption_key(subopt, user_type, option)][sel_var]['text']})"
            builder.button(text=btext, callback_data=MenuCallback(level="subextra", user_type=user_type, option=option, suboption=subopt).pack())

    total = base_price + sub_total
    if selected_text:
        text += "\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏:" + selected_text
    text += f"\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {total}‚ÇΩ"

    # Add Buy and Back
    builder.button(text="–ö—É–ø–∏—Ç—å", callback_data=MenuCallback(level="buy", user_type=user_type, option=option).pack())
    builder.button(text="–ù–∞–∑–∞–¥", callback_data=MenuCallback(level="sub", user_type=user_type).pack())
    builder.adjust(2)  # Adjust to 2 per row for better layout
    builder = add_contact_button(builder)
    return text, builder.as_markup()

# Function to build subextra text and keyboard (variants for a suboption)
async def build_subextra_text_and_keyboard(state: FSMContext, user_type: str, option: str, suboption: str) -> tuple[str, InlineKeyboardMarkup | None]:
    data = await state.get_data()
    selected = data.get("selected_suboptions", {})
    key = get_suboption_key(suboption, user_type, option)
    if not key:
        return "–û—à–∏–±–∫–∞", None
    variants = PRICES_DICT[key]
    sel_var = selected.get(suboption)
    text = f"üìå{SUBOPTION_NAMES[suboption]}:"
    if suboption == 'boost':
        text += "\n\n–ü–æ–¥–Ω—è—Ç–∏–µ ‚Äî —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ —Å –∑–∞–∫—Ä–µ–ø–æ–º –Ω–∞ 2 —á–∞—Å–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥–Ω—è—Ç—å –ø–æ—Å—Ç."

    builder = InlineKeyboardBuilder()
    for var, info in variants.items():
        if sel_var == var:
            btext = f"–£–¥–∞–ª–∏—Ç—å –æ–ø—Ü–∏—é {info['text']}"
            act = "remove"
        else:
            btext = f"{info['text']} - {info['price']} —Ä—É–±–ª–µ–π"
            act = "add"
        builder.button(text=btext, callback_data=MenuCallback(level="toggle", user_type=user_type, option=option, suboption=suboption, variant=var, action=act).pack())
    builder.button(text="–ù–∞–∑–∞–¥", callback_data=MenuCallback(level="extra", user_type=user_type, option=option).pack())
    builder.adjust(2)
    builder = add_contact_button(builder)
    return text, builder.as_markup()

# Handler for /start
@menu_router.message(Command("start"))
async def command_start(message: Message):
    if message.chat.type != 'private':
        return
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ —Ä–µ–∑—é–º–µ\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /menu"
    )
    kb = InlineKeyboardBuilder()
    kb = add_contact_button(kb)
    await message.answer(text, reply_markup=kb.as_markup())

# Handler for /menu - shows initial menu with employer/freelancer choices
@menu_router.message(Command("menu"))
async def command_menu(message: Message, state: FSMContext):
    if message.chat.type != 'private':
        return
    await state.clear()
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏
    intro = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∏–∂–µ ‚Äî –±—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—à–∏ –ø–ª–æ—â–∞–¥–∫–∏:\n"
        f"‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç: {LINKS['main']}\n"
        f"‚Ä¢ –ü—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª: {LINKS['premium']}\n"
        f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç: {LINKS['free']}\n"
        f"‚Ä¢ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏: {LINKS['reviews']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n"
        "–í–∞–∂–Ω–æ: —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–§—Ä–∏–ª–∞–Ω—Å–µ—Ä/–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å) ‚Äî –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã."
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="–ê) –î–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π", callback_data=MenuCallback(level="sub", user_type="employer").pack())
    builder.button(text="–ë) –î–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤", callback_data=MenuCallback(level="sub", user_type="freelancer").pack())
    builder.adjust(1)  # One button per row
    builder = add_contact_button(builder)
    await message.answer(intro, reply_markup=builder.as_markup())

# Main callback query handler
@menu_router.callback_query(MenuCallback.filter())
async def process_menu_callback(query: CallbackQuery, callback_data: MenuCallback, state: FSMContext, bot: Bot):
    rus_names = {'freelancer': '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞', 'employer': '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è'}
    level = callback_data.level
    user_type = callback_data.user_type
    option = callback_data.option
    suboption = callback_data.suboption
    variant = callback_data.variant
    action = callback_data.action

    await query.answer()  # Acknowledge the callback

    if level == "sub":
        await state.clear()
        builder = InlineKeyboardBuilder()
        options = [
            ("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç (—Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø)", "1"),
            ("–ü–ª–∞—Ç–Ω—ã–π —á–∞—Ç", "2"),
            ("–ö–∞–Ω–∞–ª", "3"),
            ("–ü–∞–∫–µ—Ç –°—Ç–∞–Ω–¥–∞—Ä—Ç", "4"),
            ("–ü–∞–∫–µ—Ç –°—Ç–∞–Ω–¥–∞—Ä—Ç+–ó–∞–∫—Ä–µ–ø", "5"),
            ("–ü–∞–∫–µ—Ç –ü—Ä–µ–º–∏—É–º", "6")
        ]
        for text, opt in options:
            if opt in BASE_PRICES.get(user_type, {}):
                builder.button(text=f"{OPTION_EMOJIS[opt]} {text}", callback_data=MenuCallback(level="extra", user_type=user_type, option=opt).pack())
        builder.button(text="–ù–∞–∑–∞–¥", callback_data=MenuCallback(level="main").pack())
        builder.adjust(2)
        builder = add_contact_button(builder)
        header = (
            f"–ú–µ–Ω—é –¥–ª—è {rus_names[user_type]}:\n\n"
            "‚Äî –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –∏–ª–∏ –ø–∞–∫–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∏–∂–µ.\n"
            "‚Äî –í–∞–∂–Ω–æ: —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–§—Ä–∏–ª–∞–Ω—Å–µ—Ä/–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å) ‚Äî –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
        )
        await query.message.edit_text(header, reply_markup=builder.as_markup())

    elif level == "extra":
        data = await state.get_data()
        current_option = data.get('option')
        if current_option != option:
            selected = {}
        else:
            selected = data.get('selected_suboptions', {})
        await state.update_data(user_type=user_type, option=option, selected_suboptions=selected)
        text, markup = await build_extra_text_and_keyboard(state, user_type, option)
        await query.message.edit_text(text, reply_markup=markup)

    elif level == "subextra":
        text, markup = await build_subextra_text_and_keyboard(state, user_type, option, suboption)
        await query.message.edit_text(text, reply_markup=markup)

    elif level == "toggle":
        data = await state.get_data()
        selected = data.get("selected_suboptions", {})
        subopt_name = SUBOPTION_NAMES.get(suboption, suboption)
        key = get_suboption_key(suboption, user_type, option)
        var_info = PRICES_DICT[key].get(variant, {})
        var_text = var_info.get("text", variant)
        if action == "add":
            selected[suboption] = variant
            await query.answer(f"–ö –∑–∞–∫–∞–∑—É –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–ø—Ü–∏—è {subopt_name} {var_text}")
        elif action == "remove":
            if suboption in selected:
                del selected[suboption]
            await query.answer(f"–û–ø—Ü–∏—è {subopt_name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∑–∞–∫–∞–∑–∞")
        await state.update_data(selected_suboptions=selected)
        # Return to subextra view after toggle
        text, markup = await build_subextra_text_and_keyboard(state, user_type, option, suboption)
        await query.message.edit_text(text, reply_markup=markup)

    elif level == "buy":
        data = await state.get_data()
        selected = data.get("selected_suboptions", {})
        base_price = BASE_PRICES[user_type][option]
        sub_total = 0
        for subopt, var in selected.items():
            key = get_suboption_key(subopt, user_type, option)
            sub_total += PRICES_DICT[key][var]["price"]
        total = base_price + sub_total
        await state.update_data(total=total, selected_suboptions=selected)
        await state.set_state(Purchase.waiting_check)
        # Remove buttons from previous message
        await bot.edit_message_reply_markup(chat_id=query.from_user.id, message_id=query.message.message_id, reply_markup=None)
        # Send new message with cancel (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–ø–ª–∞—Ç—ã)
        cancel_builder = InlineKeyboardBuilder()
        cancel_builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data=MenuCallback(level="cancel").pack())
        final_price_text = (f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {total}‚ÇΩ.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å—É–º–º—É {total}‚ÇΩ.\n\n"
                            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                            f"–°–±–µ—Ä–±–∞–Ω–∫:\n"
                            f"–î–∞–Ω–∏–∏–ª –î–º–∏—Ç—Ä–∏–µ–≤–∏—á –ú.\n"
                            f"2202206250331753\n"
                            f"–ú–æ–∂–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É:\n"
                            f"89164253032")
        sent_msg = await bot.send_message(query.from_user.id, text=final_price_text, reply_markup=cancel_builder.as_markup())
        await state.update_data(waiting_msg_id=sent_msg.message_id)

    elif level == "main":
        await state.clear()
        builder = InlineKeyboardBuilder()
        builder.button(text="–ê) –î–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π", callback_data=MenuCallback(level="sub", user_type="employer").pack())
        builder.button(text="–ë) –î–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤", callback_data=MenuCallback(level="sub", user_type="freelancer").pack())
        builder.adjust(1)
        builder = add_contact_button(builder)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())

    elif level == "cancel":
        data = await state.get_data()
        waiting_msg_id = data.get("waiting_msg_id")
        if waiting_msg_id:
            await bot.edit_message_text(chat_id=query.from_user.id, message_id=waiting_msg_id, text="–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
        await state.clear()

# Handler for payment check photo
@menu_router.message(Purchase.waiting_check, F.photo)
async def process_check_photo(message: Message, state: FSMContext, bot: Bot):
    photo_id = message.photo[-1].file_id  # Get the highest resolution photo
    await state.update_data(check_photo=photo_id)
    data = await state.get_data()
    waiting_msg_id = data.get('waiting_msg_id')
    if waiting_msg_id:
        # –æ—Å—Ç–∞—ë–º—Å—è –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –æ–ø–ª–∞—Ç—ã
        await bot.edit_message_text(chat_id=message.chat.id, message_id=waiting_msg_id, text="–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω.", reply_markup=None)

    user_type = data.get('user_type')
    hashtag = '#–∏—â—É' if user_type == 'employer' else '#–ø–æ–º–æ–≥—É'

    # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º
    kb = InlineKeyboardBuilder()
    kb = add_contact_button(kb)
    post_rules_text = (
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.\n\n"
        "<b>–í–∞–∂–Ω–æ:</b>\n"
        f"‚Ä¢ –í–∞—à –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ö—ç—à—Ç–µ–≥: <code>{'#–∏—â—É' if user_type == 'employer' else '#–ø–æ–º–æ–≥—É'}</code>\n"
        "‚Ä¢ –ü—Ä–∞–≤–∏–ª–æ —Å–µ—Ç–∏ –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º: –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω <code>#–ø–æ–º–æ–≥—É</code>, –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è ‚Äî <code>#–∏—â—É</code>.\n"
        "‚Ä¢ –ö—Ä–æ–º–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞ <code>#–∏—â—É</code> –∏–ª–∏ <code>#–ø–æ–º–æ–≥—É</code> —É–∫–∞–∂–∏—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ —Ö—ç—à—Ç–µ–≥–∏. "
        "–ö –ø—Ä–∏–º–µ—Ä—É, <code>#smm</code> –∏–ª–∏ <code>#–º–µ–Ω–µ–¥–∂–µ—Ä</code>.\n"
        "‚Ä¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ —Ñ–æ—Ä–º—É –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏.\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ö—ç—à—Ç–µ–≥ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞–ø–∏—Å–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    )
    await bot.send_message(message.chat.id, post_rules_text, reply_markup=kb.as_markup(), parse_mode=ParseMode.HTML)
    await state.set_state(Purchase.waiting_post)

# Handler for post content
@menu_router.message(Purchase.waiting_post)
async def process_post_content(message: Message, state: FSMContext, bot: Bot, album: List[Message] | None = None):
    data = await state.get_data()
    user_type = data.get('user_type')
    required_hashtag = '#–∏—â—É' if user_type == 'employer' else '#–ø–æ–º–æ–≥—É'

    if album:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã (–∞–ª—å–±–æ–º–∞)
        content_type = 'photo'
        file_ids = [msg.photo[-1].file_id for msg in album if msg.photo]
        text = next((msg.caption for msg in album if msg.caption), '')  # Caption –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        media_group_id = 0  # –∏—Å–ø–æ–ª—å–∑—É–µ–º 0, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    else:
        # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        media_group_id = message.media_group_id
        if message.text:
            content_type = 'text'
            text = message.text
            file_ids = []
        elif message.photo:
            content_type = 'photo'
            text = message.caption or ''
            file_ids = [message.photo[-1].file_id]
        else:
            kb = InlineKeyboardBuilder(); kb = add_contact_button(kb)
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=kb.as_markup())
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à—Ç–µ–≥–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    if required_hashtag.lower() not in (text or '').lower():
        kb = InlineKeyboardBuilder(); kb = add_contact_button(kb)
        await message.reply(
            f"–û—à–∏–±–∫–∞: –≤ –≤–∞—à–µ–º –ø–æ—Å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ö—ç—à—Ç–µ–≥ <code>{required_hashtag}</code>. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
            reply_markup=kb.as_markup(),
            parse_mode=ParseMode.HTML
        )
        return

    await state.update_data(content_type=content_type, text=text, file_ids=file_ids, media_group_id=media_group_id)

    # Generate unique order ID
    order_id = str(uuid.uuid4())

    # Store order data
    pending_orders[order_id] = {
        'user_id': message.from_user.id,
        'user_username': message.from_user.username,
        'user_type': data['user_type'],
        'option': data['option'],
        'selected_suboptions': data['selected_suboptions'],
        'total': data['total'],
        'check_photo': data['check_photo'],
        'content_type': content_type,
        'text': text,
        'file_ids': file_ids,
        'media_group_id': media_group_id
    }

    # Format suboptions string
    suboptions_str = ', '.join([f"{SUBOPTION_NAMES.get(k, k)}: {PRICES_DICT[get_suboption_key(k, data['user_type'], data['option'])][v]['text']}" for k, v in data['selected_suboptions'].items()]) if data['selected_suboptions'] else '–ù–µ—Ç'

    # If post has photos, send them to admin first
    if file_ids:
        media = [InputMediaPhoto(media=file_id, caption=text if i == 0 else None, parse_mode=ParseMode.HTML) for i, file_id in enumerate(file_ids)]
        await bot.send_media_group(ADMIN_CHAT_ID, media)
        post_str = "–ü–æ—Å—Ç: –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤—ã—à–µ"
    else:
        await bot.send_message(ADMIN_CHAT_ID, text)
        post_str = f"–ü–æ—Å—Ç: –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤—ã—à–µ"

    # Build admin keyboard
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=AdminCallback(action="confirm", order_id=order_id).pack())
    builder.button(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=AdminCallback(action="reject", order_id=order_id).pack())
    builder.adjust(2)

    # Send check photo with caption and buttons to admin
    caption = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id[:8]}\n"
        f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username} (ID: {message.from_user.id})\n"
        f"–¢–∏–ø: {data['user_type'].capitalize()}\n"
        f"–û–ø—Ü–∏—è: {DESCRIPTIONS[data['user_type']][data['option']].splitlines()[0]}\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏: {suboptions_str}\n"
        f"–°—É–º–º–∞: {data['total']}‚ÇΩ\n"
        f"{post_str}"
    )
    await bot.send_photo(ADMIN_CHAT_ID, photo=data['check_photo'], caption=caption, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
    kb = InlineKeyboardBuilder(); kb = add_contact_button(kb)
    await message.answer("–ü–æ—Å—Ç –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ!", reply_markup=kb.as_markup())
    await state.clear()

# Admin callback handler
@menu_router.callback_query(AdminCallback.filter())
async def process_admin_callback(query: CallbackQuery, callback_data: AdminCallback, state: FSMContext, bot: Bot):
    from datetime import datetime, timedelta
    import os
    import pytz
    from app.database import requests as req

    order_id = callback_data.order_id
    action = callback_data.action

    if action == 'reject':
        await state.update_data(order_id_to_reject=order_id)
        # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–æ–º
        try:
            await query.message.edit_reply_markup(reply_markup=None)
        except Exception:
            await bot.edit_message_reply_markup(chat_id=query.message.chat.id, message_id=query.message.message_id, reply_markup=None)
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:")
        await state.set_state(AdminReject.waiting_reason)
        await query.answer()
        return

    def parse_pin_variant_to_delta(var: str) -> timedelta | None:
        mapping = {
            '1_week': timedelta(weeks=1),
            '2_weeks': timedelta(weeks=2),
            '3_weeks': timedelta(weeks=3),
            '1_month': timedelta(days=30),
            '2_months': timedelta(days=60),
            '3_months': timedelta(days=90),
            '6_months': timedelta(days=180),
            'forever': None,
        }
        return mapping.get(var)

    def forever_dt(tz) -> datetime:
        return tz.localize(datetime.strptime("12:00 31-12-2200", "%H:%M %d-%m-%Y"))

    def compute_targets(user_type: str, option: str) -> List[int | str] | List[List[int | str]]:
        # –î–ª—è –ø–∞–∫–µ—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –¥–ª—è –æ–±—ã—á–Ω—ã—Ö ‚Äî –æ–¥–∏–Ω
        free_chat = int(os.getenv('FREE_CHAT_ID', '0'))
        main_chat = int(os.getenv('MAIN_CHAT_ID', '0'))
        channel = int(os.getenv('CHANNEL_ID', '0'))  # —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –ø—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª
        if option == '1':
            return [free_chat]
        if option == '2':
            return [main_chat]
        if option == '3':
            return [channel]
        if option in ('4', '5', '6'):
            return [main_chat, channel, free_chat]
        return [channel]

    def get_boost_count(selected: dict) -> int:
        try:
            var = selected.get('boost')
            return int(var) if var and var.isdigit() else 0
        except Exception:
            return 0

    await query.answer()

    if order_id in pending_orders:
        order = pending_orders.pop(order_id)
        user_id = order['user_id']

        if action == "confirm":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç(—ã) –≤ –ë–î –∫–∞–∫ ScheduledPost –ø–æ —Ü–µ–ª–µ–≤—ã–º —á–∞—Ç–∞–º
            tz = pytz.timezone("Europe/Moscow")
            now = datetime.now(tz)
            scheduled_time = now + timedelta(seconds=90)
            selected = order.get('selected_suboptions', {})
            user_type = order['user_type']
            option = order['option']
            pin_variant = selected.get('pin')
            pin_delta = parse_pin_variant_to_delta(pin_variant) if pin_variant else None
            boost_count = get_boost_count(selected)

            # –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –Ω–∞–≤—Å–µ–≥–¥–∞
            delete_time_base = forever_dt(tz)

            targets = compute_targets(user_type, option)
            for chat_id in targets:
                # unpin_time –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:
                if option == '4':
                    # –ü–∞–∫–µ—Ç 4: –∑–∞–∫—Ä–µ–ø —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —á–∞—Ç–µ –Ω–∞ 1 –º–µ—Å—è—Ü
                    if chat_id == int(os.getenv('FREE_CHAT_ID', '0')):
                        unpin_time = now + timedelta(days=30)
                    else:
                        unpin_time = None
                elif option == '5':
                    # –ü–∞–∫–µ—Ç 5: –∑–∞–∫—Ä–µ–ø 1 –º–µ—Å—è—Ü –≤–æ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —á–∞—Ç–∏–∫–∞—Ö
                    unpin_time = now + timedelta(days=30)
                elif option == '6':
                    # –ü–∞–∫–µ—Ç 6: –∑–∞–∫—Ä–µ–ø –Ω–∞–≤—Å–µ–≥–¥–∞
                    unpin_time = forever_dt(tz)
                else:
                    # –û–±—ã—á–Ω—ã–µ: –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è pin ‚Äî –±–µ—Ä—ë–º –µ—ë, forever -> 2200; –∏–Ω–∞—á–µ –±–µ–∑ –∑–∞–∫—Ä–µ–ø–∞
                    if pin_delta is not None:
                        unpin_time = now + pin_delta
                    elif pin_variant == 'forever':
                        unpin_time = forever_dt(tz)
                    else:
                        unpin_time = None

                # delete_time –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
                delete_time = delete_time_base

                # –û—Å–Ω–æ–≤–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
                await req.add_or_update_scheduled_post(
                    content_type=order['content_type'],
                    text=order['text'],
                    photo_file_ids=order['file_ids'],
                    scheduled_time=scheduled_time.replace(tzinfo=None),  # –≤ –ë–î –±–µ–∑ tz
                    media_group_id=order['media_group_id'] or 0,
                    unpin_time=unpin_time.replace(tzinfo=None) if unpin_time else None,
                    delete_time=delete_time.replace(tzinfo=None) if delete_time else None,
                    chat_id=int(chat_id)
                )

                # –ü–æ–¥–Ω—è—Ç–∏—è: –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ—Å—Ç boost_count —Ä–∞–∑, –∫–∞–∂–¥—ã–µ +2 —á–∞—Å–∞, —Å –∑–∞–∫—Ä–µ–ø–æ–º –Ω–∞ 2 —á–∞—Å–∞
                for i in range(1, boost_count + 1):
                    st = (now + timedelta(hours=2 * i)).replace(tzinfo=None)
                    unpin_boost = (now + timedelta(hours=2 * i + 2)).replace(tzinfo=None)
                    await req.add_or_update_scheduled_post(
                        content_type=order['content_type'],
                        text=order['text'],
                        photo_file_ids=order['file_ids'],
                        scheduled_time=st,
                        media_group_id=order['media_group_id'] or 0,
                        unpin_time=unpin_boost,
                        delete_time=delete_time.replace(tzinfo=None) if delete_time else None,
                        chat_id=int(chat_id)
                    )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
            kb = InlineKeyboardBuilder(); kb = add_contact_button(kb)
            await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ü–æ—Å—Ç—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=kb.as_markup())
            status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"

        await query.message.edit_caption(caption=query.message.caption + f"\n\n–°—Ç–∞—Ç—É—Å: {status}", reply_markup=None)
    else:
        await query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
@menu_router.message(AdminReject.waiting_reason)
async def process_rejection_reason(message: Message, state: FSMContext, bot: Bot):
    reason = message.text
    data = await state.get_data()
    order_id = data.get('order_id_to_reject')

    if order_id in pending_orders:
        order = pending_orders.pop(order_id)
        user_id = order['user_id']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
        kb = InlineKeyboardBuilder(); kb = add_contact_button(kb)
        await bot.send_message(
            user_id,
            f"–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}",
            reply_markup=kb.as_markup(),
            parse_mode=ParseMode.HTML
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ
        # (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º, –Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –±–µ–∑ reply)
        # –ü—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞, —á—Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
        await message.answer(f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id[:8]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    await state.clear()


# Fallback for wrong input in states
@menu_router.message(Purchase.waiting_check)
async def invalid_check(message: Message):
    kb = InlineKeyboardBuilder(); kb = add_contact_button(kb)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞.", reply_markup=kb.as_markup())

@menu_router.message(Purchase.waiting_post)
async def invalid_post(message: Message):
    kb = InlineKeyboardBuilder(); kb = add_contact_button(kb)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=kb.as_markup())
